{
	"name": "modlite",
	"scopeName": "source.modlite",

	"patterns": [
		{
			"include": "#expression"
		}
	],
	"repository": {
		"expression": {
			"patterns": [
				{
					"include": "#compilerSetting"
				},

				{
					"include": "#keyword"
				},
				{
					"include": "#control_keyword"
				},

				{
					"include": "#function_call"
				},
				{
					"include": "#type"
				},

				{
					"include": "#line_comment"
				},
				{
					"include": "#block_comment"
				},
				{
					"include": "#operator"
				},
				{
					"include": "#single_quote_string"
				},
				{
					"include": "#double_quote_string"
				},
				{
					"include": "#bracket_expression"
				},
				{
					"include": "#paren_expression"
				}
			]
		},
		"compilerSetting": {
			"name": "keyword.control.modlite",
			"match": "@[a-zA-Z_][a-zA-Z0-9\\_]*"
		},

		"keyword": {
			"name": "keyword.constant.modlite",
			"match": "(true|false)"
		},
		"control_keyword": {
			"name": "keyword.control.modlite",
			"match": "\\s*(function|return|macro|import|from|if|else|switch|while|as|class|var)"
		},

		"function_call": {
			"match": "([a-zA-Z_][a-zA-Z0-9\\_]*)\\s*(\\([\\s\\S]*\\))",
			"captures": {
				"1": {
					"name": "entity.name.function.modlite"
				},
				"2": {
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			}
		},
		"type": {
			"match": "[\\:\\!]\\s*([a-zA-Z_][a-zA-Z0-9\\_]*)",
			"captures": {
				"1": {
					"name": "storage.type.modlite"
				}
			}
		},
		"line_comment": {
			"name": "comment.line.modlite",

			"begin": "//",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.modlite"
				}
			},
			"end": "\n",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.comment.modlite"
				}
			}
		},
		"block_comment": {
			"name": "comment.block.modlite",

			"begin": "\/[*]",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.modlite"
				}
			},
			"end": "[*](\/)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.comment.modlite"
				}
			}
		},
		"operator": {
			"name": "keyword.operator.arithmetic.modlite",
			"match": "(\\+|\\-|\\*|\\/)"
		},
		"single_quote_string": {
			"name": "string.quoted.single.modlite",

			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.modlite"
				}
			},
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.modlite"
				}
			}
		},
		"double_quote_string": {
			"name": "string.quoted.double.modlite",

			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.modlite"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.modlite"
				}
			}
		},
		"bracket_expression": {
			"name": "expression.bracket.group",
			
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.bracket.open"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.bracket.close"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"paren_expression": {
			"name": "expression.paren.group",
			
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.paren.open"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.paren.close"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		}
	}
}